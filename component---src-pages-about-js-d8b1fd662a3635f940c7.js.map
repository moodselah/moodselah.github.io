{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/constants/meta.js","webpack:///./src/constants/enum.js","webpack:///./src/constants/index.js","webpack:///./src/constants/lang.js","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/head/index.jsx"],"names":["resume","data","allMarkdownRemark","edges","filter","node","frontmatter","lang","Lang","map","title","style","marginLeft","marginRight","maxWidth","rhythm","padding","dangerouslySetInnerHTML","__html","html","pageQuery","StaticQueryContext","React","createContext","StaticQuery","props","Consumer","staticQueryData","query","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","CATEGORY_TYPE","ALL","THEME","LIGHT","DARK","GitHubTheme","overrideThemeStyles","a","boxShadow","textDecoration","color","h1","fontWeight","lineHeight","fontFamily","h2","marginTop","marginBottom","ul","li","typography","Typography","scale","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","createElement","InternalPageRenderer","json","shape","Head","description","meta","keywords","detailsQuery","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","array","arrayOf"],"mappings":"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","file":"component---src-pages-about-js-d8b1fd662a3635f940c7.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport { rhythm } from '../utils/typography'\nimport { Head } from '../components/head'\nimport * as Lang from '../constants'\n\nexport default ({ data }) => {\n  const resumes = data.allMarkdownRemark.edges\n\n  const resume = resumes\n    .filter(({ node }) => node.frontmatter.lang === Lang.KOREAN)\n    .map(({ node }) => node)[0]\n\n  return (\n    <>\n      <Head title=\"Resume\" />\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(30),\n          padding: `${rhythm(0.5)} ${rhythm(3 / 4)} ${rhythm(1.5)} ${rhythm(\n            3 / 4\n          )}`,\n        }}\n      >\n        <div dangerouslySetInnerHTML={{ __html: resume.html }} />\n      </div>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: { frontmatter: { category: { eq: null } } }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 160)\n          html\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            lang\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","export const HOME_TITLE = 'Home'\n","export const CATEGORY_TYPE = {\n  ALL: 'All',\n}\n\nexport const THEME = {\n  LIGHT: 'light',\n  DARK: 'dark',\n}\n","export * from './meta'\nexport * from './window'\nexport * from './enum'\nexport * from './lang'\n","export const KOREAN = 'ko'\nexport const ENGLISH = 'en'\n","import Typography from 'typography'\nimport GitHubTheme from 'typography-theme-github'\n\nGitHubTheme.overrideThemeStyles = () => {\n  return {\n    a: {\n      boxShadow: `none`,\n      textDecoration: `none`,\n      color: `#0687f0`,\n    },\n    'a.gatsby-resp-image-link': {\n      boxShadow: `none`,\n      textDecoration: `none`,\n    },\n\n    'a:hover': {\n      textDecoration: `none`,\n    },\n\n    h1: {\n      fontWeight: 800,\n      lineHeight: 1.2,\n      fontFamily: 'Catamaran',\n    },\n\n    h2: {\n      fontWeight: 700,\n      lineHeight: 1.2,\n      marginTop: '56px',\n      marginBottom: '20px',\n      fontFamily: 'Catamaran',\n    },\n\n    ul: {\n      marginBottom: '6px',\n    },\n\n    li: {\n      marginBottom: '2px',\n    },\n  }\n}\n\nconst typography = new Typography(GitHubTheme)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nexport function Head({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nHead.defaultProps = {\n  lang: `ko`,\n  meta: [],\n  keywords: [],\n}\n\nHead.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}